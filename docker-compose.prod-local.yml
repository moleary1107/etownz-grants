services:
  # Frontend - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: etownz-grants-frontend:prod-${BUILD_TAG:-latest}
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://grants.etownz.com/api
      - NEXT_PUBLIC_SANITY_PROJECT_ID=hpmuagfn
      - NEXT_PUBLIC_SANITY_DATASET=production
    ports:
      - "3001:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: etownz-grants-backend:prod-${BUILD_TAG:-latest}
    command: node dist/index.js
    environment:
      - NODE_ENV=production
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - DO_SPACES_KEY=${DO_SPACES_KEY}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT}
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SMTP_FROM=${SMTP_FROM}
      - AI_SERVICE_ENDPOINT=${AI_SERVICE_ENDPOINT:-http://localhost:8001}
      - SANITY_PROJECT_ID=hpmuagfn
      - SANITY_DATASET=production
      - SANITY_AUTH_TOKEN=${SANITY_AUTH_TOKEN}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./uploads:/app/uploads
      - ./documents:/app/documents
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=etownz_grants
      - POSTGRES_USER=etownz
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-etownz2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/db/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U etownz"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-etownz2024}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: