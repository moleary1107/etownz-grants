name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: 165.227.149.136
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Navigate to project directory
          cd /root/etownz-grants
          
          # Pull latest code
          git pull origin main
          
          # Set build tag
          export BUILD_TAG=$(date +%Y%m%d-%H%M%S)
          echo "Building with tag: $BUILD_TAG"
          
          # Build new images
          docker-compose -f docker-compose.prod-local.yml build
          
          # Stop old containers and clean state
          docker-compose -f docker-compose.prod-local.yml down --volumes --remove-orphans
          
          # Remove any old volumes to ensure fresh database
          docker volume rm etownz-grants_postgres_data etownz-grants_redis_data 2>/dev/null || true
          
          # Start containers in correct order
          echo "Starting database and cache..."
          docker-compose -f docker-compose.prod-local.yml up -d postgres redis
          
          # Wait for database to be fully ready
          echo "Waiting for database to be ready..."
          timeout 120 bash -c 'until docker-compose -f docker-compose.prod-local.yml exec -T postgres pg_isready -U etownz -d etownz_grants; do sleep 2; done'
          
          # Initialize complete database schema with all migrations
          echo "Initializing complete database schema..."
          
          # Run base schema first
          docker-compose -f docker-compose.prod-local.yml exec -T postgres psql -U etownz -d etownz_grants -f /docker-entrypoint-initdb.d/01-init.sql || echo "Base schema completed"
          
          # Create critical AI tables that backend expects
          echo "Creating AI cost management tables..."
          docker-compose -f docker-compose.prod-local.yml exec -T postgres psql -U etownz -d etownz_grants -c "
            CREATE TABLE IF NOT EXISTS ai_cost_thresholds (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              name VARCHAR(255) NOT NULL,
              monthly_limit DECIMAL(10,2) NOT NULL,
              daily_limit DECIMAL(10,2),
              hourly_limit DECIMAL(10,2),
              is_active BOOLEAN DEFAULT true,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            
            CREATE TABLE IF NOT EXISTS ai_usage_metrics (
              id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
              service_type VARCHAR(100) NOT NULL,
              cost_amount DECIMAL(10,2) NOT NULL,
              tokens_used INTEGER,
              request_count INTEGER DEFAULT 1,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            
            INSERT INTO ai_cost_thresholds (name, monthly_limit, daily_limit) 
            VALUES ('Default Threshold', 100.00, 10.00) 
            ON CONFLICT DO NOTHING;
          " || echo "AI tables creation completed with warnings"
          
          # Start backend and frontend after database is confirmed ready
          echo "Starting application services..."
          docker-compose -f docker-compose.prod-local.yml up -d backend frontend
          
          # Wait longer for backend to fully initialize all services
          echo "Waiting for backend services to initialize..."
          sleep 30
          
          # Health check
          echo "Checking service health..."
          
          # Check frontend
          if curl -f -s http://localhost:3001 > /dev/null; then
              echo "✅ Frontend is healthy"
          else
              echo "❌ Frontend health check failed"
              docker-compose -f docker-compose.prod-local.yml logs frontend --tail=20
              exit 1
          fi
          
          # Check backend with retry logic
          echo "Checking backend health..."
          backend_healthy=false
          for i in {1..10}; do
            if curl -f -s http://localhost:8000/health > /dev/null; then
              echo "✅ Backend is healthy (attempt $i)"
              backend_healthy=true
              break
            else
              echo "Backend not ready yet (attempt $i/10), waiting 10s..."
              sleep 10
            fi
          done
          
          if [ "$backend_healthy" = false ]; then
            echo "❌ Backend health check failed after 10 attempts"
            echo "Backend logs:"
            docker-compose -f docker-compose.prod-local.yml logs backend --tail=50
            echo "Backend container status:"
            docker-compose -f docker-compose.prod-local.yml ps backend
            exit 1
          fi
          
          # Clean up old images (keep last 3)
          docker images | grep etownz-grants-frontend | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true
          docker images | grep etownz-grants-backend | tail -n +4 | awk '{print $3}' | xargs -r docker rmi || true
          
          echo "✅ Deployment complete!"
    
    - name: Verify deployment
      run: |
        # Test frontend
        if curl -f -s https://grants.etownz.com > /dev/null; then
            echo "✅ Frontend is accessible"
        else
            echo "❌ Frontend is not accessible"
            exit 1
        fi
        
        # Test backend API
        if curl -f -s https://grants.etownz.com/api/health > /dev/null; then
            echo "✅ Backend API is healthy"
        else
            echo "❌ Backend API health check failed"
            exit 1
        fi
        
        # Test knowledge-base page
        if curl -f -s https://grants.etownz.com/dashboard/knowledge-base | grep -q "Knowledge Base"; then
            echo "✅ Knowledge-base page is working"
        else
            echo "❌ Knowledge-base page check failed"
            exit 1
        fi
        
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to production ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.head_commit.message }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true