
services:
  # Frontend - Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8001
    depends_on:
      - backend

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8001:8000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/etownz_grants
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_secret_key
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GOOGLE_SERVICE_ACCOUNT_KEY=${GOOGLE_SERVICE_ACCOUNT_KEY}
      - ELASTIC_EMAIL_SMTP_HOST=${ELASTIC_EMAIL_SMTP_HOST}
      - ELASTIC_EMAIL_SMTP_PORT=${ELASTIC_EMAIL_SMTP_PORT}
      - ELASTIC_EMAIL_SMTP_USER=${ELASTIC_EMAIL_SMTP_USER}
      - ELASTIC_EMAIL_SMTP_PASS=${ELASTIC_EMAIL_SMTP_PASS}
      - ELASTIC_EMAIL_FROM_EMAIL=${ELASTIC_EMAIL_FROM_EMAIL}
    depends_on:
      - postgres
      - redis

  # AI Crawler Service
  crawler:
    build:
      context: ./crawler
      dockerfile: Dockerfile.dev
    ports:
      - "8002:8002"
    volumes:
      - ./crawler:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/etownz_grants
    depends_on:
      - postgres

  # MCP Documentation Server
  mcp-docs:
    build:
      context: ./mcp-servers/documentation
      dockerfile: Dockerfile.dev
    volumes:
      - ./mcp-servers/documentation:/app
      - ./:/project
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - PROJECT_ROOT=/project
    ports:
      - "9000:9000"

  # MCP Fetch Server - Web scraping for grants
  mcp-fetch:
    build:
      context: ./mcp-servers/fetch
      dockerfile: Dockerfile.dev
    volumes:
      - ./mcp-servers/fetch:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - "9001:9001"

  # MCP Filesystem Server - Document management
  mcp-filesystem:
    build:
      context: ./mcp-servers/filesystem
      dockerfile: Dockerfile.dev
    volumes:
      - ./mcp-servers/filesystem:/app
      - ./uploads:/app/uploads
      - ./documents:/app/documents
      - ./templates:/app/templates
      - /app/node_modules
    environment:
      - NODE_ENV=development
    ports:
      - "9002:9002"

  # MCP Document Processor - PDF/DOCX to JSON conversion with AI
  mcp-document-processor:
    build:
      context: ./mcp-servers/document-processor
      dockerfile: Dockerfile.dev
    volumes:
      - ./mcp-servers/document-processor:/app
      - ./uploads:/app/uploads
      - ./documents:/app/documents
      - ./templates:/app/templates
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_SERVICE_ACCOUNT_KEY=${GOOGLE_SERVICE_ACCOUNT_KEY}
    ports:
      - "9003:9003"
    depends_on:
      - mcp-filesystem

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=etownz_grants
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/db/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data


  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge